# Generated by Django 5.0.7 on 2025-09-24 22:36
from django.db import migrations
from django.utils import timezone
from datetime import date

OPEN_DATE = date(2025, 9, 1)

OWNERS = [
    {"username": "Vadim", "role": "owner", "share": 50.0},
    {"username": "admin", "role": "owner", "share": 50.0},
]

MODERATORS = [
    {"username": "Denis", "role": "moderator"},
    {"username": "Dima", "role": "moderator"},
]


def forwards(apps, schema_editor):
    User = apps.get_model('auth', 'User')
    FinancePartner = apps.get_model('rental', 'FinancePartner')
    OwnerContribution = apps.get_model('rental', 'OwnerContribution')

    username_to_partner = {}

    # Create owners
    for item in OWNERS:
        try:
            user = User.objects.get(username=item["username"])  # case sensitive
        except User.DoesNotExist:
            continue
        partner, _ = FinancePartner.objects.get_or_create(
            user=user,
            defaults={"role": "owner", "share_percent": item.get("share", 50.0), "active": True}
        )
        username_to_partner[item["username"]] = partner

    # Create moderators
    for item in MODERATORS:
        try:
            user = User.objects.get(username=item["username"])  # case sensitive
        except User.DoesNotExist:
            continue
        partner, _ = FinancePartner.objects.get_or_create(
            user=user,
            defaults={"role": "moderator", "share_percent": 0, "active": True}
        )
        username_to_partner[item["username"]] = partner

    # Opening contributions (on OPEN_DATE): Vadim 20000, admin 10000
    vadim = username_to_partner.get("Vadim")
    admin = username_to_partner.get("admin")
    if vadim:
        OwnerContribution.objects.get_or_create(
            partner=vadim, amount=20000, date=OPEN_DATE,
            defaults={"source": "manual", "note": "Opening balance"}
        )
    if admin:
        OwnerContribution.objects.get_or_create(
            partner=admin, amount=10000, date=OPEN_DATE,
            defaults={"source": "manual", "note": "Opening balance"}
        )


def backwards(apps, schema_editor):
    FinancePartner = apps.get_model('rental', 'FinancePartner')
    OwnerContribution = apps.get_model('rental', 'OwnerContribution')
    OwnerContribution.objects.filter(note="Opening balance", date=OPEN_DATE).delete()
    FinancePartner.objects.filter(user__username__in=[u["username"] for u in OWNERS+MODERATORS]).delete()


class Migration(migrations.Migration):
    dependencies = [
        ('rental', '0011_expense_note_expense_paid_source_and_more'),
    ]

    operations = [
        migrations.RunPython(forwards, backwards),
    ]
